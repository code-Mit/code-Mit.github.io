<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
  <a id="more"></a>


<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
  <!--more-->
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Codable</title>
    <url>/2020/11/20/Codable/</url>
    <content><![CDATA[<h1 id="codable"><a href="#codable" class="headerlink" title="codable"></a>codable</h1><p>codable是可以将Swift对象本身转换为Data类型或从类型中转换出来的协议。Codable是<code>Encodable</code>和<code>Decodable</code>协议的类型别名。这是一种易于使用的官方协议，用于将JSON对象从服务器解析为Swift对象。</p>
<p><code>Encodable</code>在必须序列化Swift对象并将其发送到服务器时使用。另一方面，Decodable当需要反序列化服务器JSON数据时使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typealias Codable &#x3D; Decodable &amp; Encodable</span><br></pre></td></tr></table></figure>

<p>它其实另外两个 Protocol 的集合，也就是 <code>Decodable</code> 和 <code>Encodable</code>。 一个用作数据解析，另一个用作数据编码。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;key_str&quot;: &quot;string value&quot;,</span><br><span class="line">    &quot;key_int&quot;: 1,</span><br><span class="line">    &quot;key_double&quot;: 100.0,</span><br><span class="line">    &quot;key_int_array&quot;: [</span><br><span class="line">      1,</span><br><span class="line">      2,</span><br><span class="line">      3</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我们以上面的JSON为例，尝试将其解析为Swift对象。它有4个字段类型String，Int，Double和的Int数组。它们是JSON数据中的常见类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let basicJSON &#x3D; &quot;&quot;&quot;</span><br><span class="line">  &#123;</span><br><span class="line">      &quot;key_str&quot;: &quot;string value&quot;,</span><br><span class="line">      &quot;key_int&quot;: 1,</span><br><span class="line">      &quot;key_double&quot;: 100.0,</span><br><span class="line">      &quot;key_int_array&quot;: [</span><br><span class="line">        1,</span><br><span class="line">        2,</span><br><span class="line">        3</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">  do &#123;</span><br><span class="line">    let basicJSONData &#x3D; basicJSON.data(using: .utf8)!</span><br><span class="line">    let demoCodableStruct &#x3D; try JSONDecoder().decode(DemoCodableStruct.self, from: basicJSONData)</span><br><span class="line">    print(&quot;\(demoCodableStruct)&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">    Log: </span><br><span class="line">    DemoCodableStruct(</span><br><span class="line">      key_str: &quot;string value&quot;, </span><br><span class="line">      key_int: 1, </span><br><span class="line">      key_double: 100.0, </span><br><span class="line">      key_int_array: [1, 2, 3]</span><br><span class="line">    )</span><br><span class="line">    *&#x2F;</span><br><span class="line">  &#125; catch &#123;</span><br><span class="line">    print(&quot;Error during ecoding: \(error.localizedDescription)&quot;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
